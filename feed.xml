<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rajat Singla</title>
    <description>Hi there, Welcome to rajat's blog. You will find blogs here on ror,emberjs,deployment ,some cool programming stuff and my new findings. Currently i am working on soldier2ndlife(a product of navyug) a portal to help retired veterans.To get my attention send me a paradox. :)
</description>
    <link>http://rajatsingla.in/</link>
    <atom:link href="http://rajatsingla.in/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 29 Oct 2016 11:43:40 +0530</pubDate>
    <lastBuildDate>Sat, 29 Oct 2016 11:43:40 +0530</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>How to add csrf in Ember app</title>
        <description>&lt;h2 id=&quot;what-if-im-using-rails-as-api-so-my-frontend-is-seperated-from-rails-can-i-still-prevent-csrf-and-how&quot;&gt;What if i’m using rails as api, so my frontend is seperated from rails can i still prevent csrf and how?&lt;/h2&gt;

&lt;p&gt;So lets take an example where we use ember for frontend and rails as api.
In this case, apart from adding &lt;code class=&quot;highlighter-rouge&quot;&gt;protect_from_forgery in application controller&lt;/code&gt; you have to do additional &lt;strong&gt;three things&lt;/strong&gt;.  &lt;br /&gt;
&lt;strong&gt;One&lt;/strong&gt; you have to add the following code in application controller:
&lt;!--more--&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;after_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_csrf_token&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_csrf_token&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;xhr?&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Add the newly created csrf token to the page headers&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# These values are sent on 1 request only&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'X-CSRF-Token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_authenticity_token&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we are sending the newly generated &lt;code class=&quot;highlighter-rouge&quot;&gt;form_authenticity_token&lt;/code&gt; in the response of xhr request(ajax- XMLHttpRequest)   &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;request.xhr?&lt;/code&gt; is to ensure that it is ajax request, we would not want to send the token to any other request right.
&lt;br /&gt;&lt;strong&gt;Two&lt;/strong&gt; you have to set this new token in meta tag by extracting it from the response.
&lt;br /&gt;&lt;strong&gt;Third&lt;/strong&gt; you will send csrf token in the request header by extracting it from the meta tag.   &lt;br /&gt;
you can achieve two and three by adding following code in &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; of ember&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajaxPrefilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;originalOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'meta[name=&quot;csrf-token&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'X-CSRF-Token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajaxComplete&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;csrf_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getResponseHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'X-CSRF-Token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csrf_token&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'meta[name=&quot;csrf-token&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'content'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;csrf_token&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-change-csrf-token-in-header-on-every-post-request-and-not-only-when-session-changes&quot;&gt;Why change csrf token in header on every post request and not only when session changes?&lt;/h2&gt;

&lt;p&gt;If it were to change token only when session changes there would be an extra overhead to trigger session change and then generate csrf token and set in header.
It is a lot easier to randomally generate csrf token using &lt;code class=&quot;highlighter-rouge&quot;&gt;session[:_csrf_token]&lt;/code&gt; on every post request.&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Aug 2016 21:21:58 +0530</pubDate>
        <link>http://rajatsingla.in/ruby/2016/08/06/how-to-add-csrf-in-ember-app.html</link>
        <guid isPermaLink="true">http://rajatsingla.in/ruby/2016/08/06/how-to-add-csrf-in-ember-app.html</guid>
        
        <category>ruby</category>
        
        <category>csrf</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Sessions and csrf in rails.</title>
        <description>&lt;p&gt;Most apps need to be able to store some data about a user. Maybe it’s a user id, or a preferred language.
session is the perfect place to put this kind of data.
Little bits of data you want to keep around for more than one request.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sessions&lt;/code&gt; are easy to use:
&lt;!--more--&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;what-is-a-session&quot;&gt;What is a session?&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;A session is just a place to store data during one request that you can read during later requests.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;You can set some data in a controller action:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;app/controllers/sessions_controller.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And read it in another:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;app/controllers/users_controller.rb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:current_user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It might not seem that interesting.
But it takes coordination between your user’s browser and
your Rails app to make everything connect up.
And it all starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;cookies&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cookie&quot;&gt;Cookie?&lt;/h2&gt;
&lt;p&gt;When you request a webpage, the server can set a cookie when it responds back. &lt;br /&gt;
Your browser will store those cookies.
And until the cookie expires,
every time you make a request,
your browser will send the cookies back to the server.
&lt;b&gt;This cookie contains your rails session you have been using.&lt;/b&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cross-site-request-forgery&quot;&gt;Cross-Site Request Forgery&lt;/h2&gt;
&lt;p&gt;Lets say you are logged in on gmail.com and in
another tab you have opened a hacker’s website. Which is urging you to
click a image saying you will get 100 coins. But actually it will send a
request to gmail.com deleting all mails. This request will be successful
 because browser will send cookie along with the request
 and in this cookie your current gmail session exists.&lt;/p&gt;

&lt;h2 id=&quot;how-to-prevent-csrf&quot;&gt;How to prevent CSRF?&lt;/h2&gt;
&lt;p&gt;Synchronizer token pattern (STP) is a technique where a token, secret and unique value for each request, is embedded by the web application in all HTML forms and verified on the server side.&lt;/p&gt;

&lt;h2 id=&quot;how-does-the-token-look-like&quot;&gt;How does the token look like?&lt;/h2&gt;
&lt;p&gt;The token will be added automatically to every form like this:   &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input name=&quot;authenticity_token&quot; type=&quot;hidden&quot; value=&quot;OXuQV+9Q1hi5YkeynLQgVddCRfdUwl0huvqSjoqf4mE=&quot; /&amp;gt;.&lt;/code&gt;  &lt;br /&gt;
The same token is in user’s session. On every request the token in session and the token in HTML form are compared on the server side and if they match
only then the request is completed.&lt;strong&gt;The purpose of the token is that an attacker doesn’t know the victim’s
token and thus a CSRF attack without that token would be refused.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;protect-csrf-in-rails-app&quot;&gt;Protect CSRF in Rails app&lt;/h2&gt;
&lt;p&gt;The CSRF protection can be turned on with the &lt;code class=&quot;highlighter-rouge&quot;&gt;protect_from_forgery&lt;/code&gt; controller method  and is included in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ApplicationController&lt;/code&gt; by default.
So for every non-GET (and non-HEAD) action Rails will check the authenticity token.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Prevent CSRF attacks by raising an exception.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# For APIs, you may want to use :null_session instead.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;protect_from_forgery&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: :exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;source: &lt;br /&gt;
&lt;a href=&quot;http://www.rorsecurity.info/&quot;&gt;http://www.rorsecurity.info/&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://www.justinweiss.com/articles/how-rails-sessions-work/&quot;&gt;http://www.justinweiss.com/articles/how-rails-sessions-work/&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;http://guides.rubyonrails.org/security.html&quot;&gt;http://guides.rubyonrails.org/security.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Aug 2016 21:41:55 +0530</pubDate>
        <link>http://rajatsingla.in/ruby/2016/08/04/session-and-csrf-in-rails.html</link>
        <guid isPermaLink="true">http://rajatsingla.in/ruby/2016/08/04/session-and-csrf-in-rails.html</guid>
        
        <category>ruby</category>
        
        <category>session</category>
        
        <category>csrf</category>
        
        <category>cookie</category>
        
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Modules vs Classes in Ruby</title>
        <description>&lt;p&gt;A &lt;strong&gt;Module&lt;/strong&gt; is a collection of methods and constants. The methods in a module may be instance methods or module methods. Instance methods appear as methods in a class when the module is included, module methods do not. Conversely, module methods may be called without creating an encapsulating object, while instance methods may not. (See &lt;code class=&quot;highlighter-rouge&quot;&gt;Module#module_function&lt;/code&gt;.)
&lt;!--more--&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the descriptions that follow, the parameter sym refers to a symbol, which is either a quoted string or a Symbol (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;:name&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mod&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Math&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CONST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;meth&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#  ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; Module&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constants&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [:CONST, :PI, :E]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [:meth]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  constants → array
  constants(inherited) → array
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the first form, returns an array of the names of all constants accessible from the point of call. This list includes the names of all modules and classes defined in the global scope.&lt;/p&gt;

&lt;p&gt;source: &lt;a href=&quot;http://ruby-doc.org/core-2.2.0/Module.html&quot; title=&quot;link to ruby doc&quot;&gt;http://ruby-doc.org/core-2.2.0/Module.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jul 2016 12:41:55 +0530</pubDate>
        <link>http://rajatsingla.in/ruby/2016/07/28/module-vs-class.html</link>
        <guid isPermaLink="true">http://rajatsingla.in/ruby/2016/07/28/module-vs-class.html</guid>
        
        
        <category>ruby</category>
        
      </item>
    
  </channel>
</rss>
